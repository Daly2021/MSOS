/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.7.27-log : Database - msos
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`msos` /*!40100 DEFAULT CHARACTER SET utf8 */;

USE `msos`;

/*Table structure for table `article` */

DROP TABLE IF EXISTS `article`;

CREATE TABLE `article` (
  `article_id` bigint(20) NOT NULL,
  `article_title` text NOT NULL,
  `user_id` varchar(20) NOT NULL,
  `article_content` longtext NOT NULL,
  `article_views` bigint(20) NOT NULL,
  `article_comment_count` bigint(20) NOT NULL,
  `article_time` datetime DEFAULT NULL,
  `article_type` varchar(20) NOT NULL,
  PRIMARY KEY (`article_id`),
  KEY `article_tuser__fk` (`user_id`),
  CONSTRAINT `article_tuser__fk` FOREIGN KEY (`user_id`) REFERENCES `tuser` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `article` */

insert  into `article`(`article_id`,`article_title`,`user_id`,`article_content`,`article_views`,`article_comment_count`,`article_time`,`article_type`) values (-777999671,'腾讯云部署hexo','djc',' # 腾讯云部署hexo\r\n\r\n### 一、部署环境与准备\r\n\r\n##### 1.环境\r\n\r\n本地Windows10操作系统\r\n\r\n腾讯云Cenots7.6服务器\r\n\r\n##### 2.准备\r\n\r\nHexo 本地博客\r\n\r\n腾讯云终端操作\r\n\r\n### 二、云服务器配置Git\r\n\r\n#### 1.安装依赖库\r\n\r\n```\r\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel \r\n```\r\n\r\n#### 2.安装编译工具\r\n\r\n```\r\nyum install gcc perl-ExtUtils-MakeMaker package\r\n```\r\n\r\n#### 3.查看git的版本y\r\n\r\n```\r\ngit version\r\n```\r\n\r\n#### 4.删除git\r\n\r\n```\r\nyum remove git -y\r\n```\r\n\r\n#### 5.下载解压最新版\r\n\r\n```\r\ncd /usr/local/src     #下载的目录\r\nwget http://ftp.ntu.edu.tw/software/scm/git/git-2.9.5.tar.gz       #下载最新版 \r\ntar -zvxf git-2.9.5.tar.gz          #解压到当前文件夹\r\n```\r\n\r\n#### 6.编辑并安装\r\n\r\n```\r\ncd git-2.9.5 #进入文件夹\r\nmake prefix=/usr/local/git all    #编译源码\r\nmake prefix=/usr/local/git install    #安装路径\r\n```\r\n\r\n#### 7.配置git的环境变量\r\n\r\n```\r\necho \'export PATH=$PATH:/usr/local/git/bin\' >> /etc/bashrc\r\n```\r\n\r\n#### 8.刷新环境变量\r\n\r\n```\r\nsource /etc/bashrc\r\n```\r\n\r\n#### 9.查看版本号\r\n\r\n```\r\ngit --version\r\n```\r\n\r\n#### 10创建git用户并且修改权限\r\n\r\n```\r\nadduser CodeCheng\r\npasswd CodeCheng\r\nchmod 740 /etc/sudoers\r\nvim /etc/sudoers\r\n\r\nroot    ALL=(ALL)       ALL\r\nCodeCheng     ALL=(ALL)       ALL\r\n```\r\n\r\n#### 11.本地windows10使用Gitbash创建密钥\r\n\r\n```\r\nssh-keygen -t rsa\r\n```\r\n\r\n#### 12.将本地创建id_rsa.pub中文件复制\r\n\r\n```\r\nsu CodeCheng\r\nmkdir ~/.ssh\r\nvim ~/.ssh/authorized_keys\r\n```\r\n\r\n#### 13.本地测试\r\n\r\n```\r\nssh -v CodeCheng@服务器ip\r\nssh -v CodeCheng1.15.122.167\r\n```\r\n\r\n',7,0,'2021-06-03 19:27:18','个人日志'),(-777812098,'随笔','djc',' 学会微笑 \r\n  \r\n     \r\nIf not to the sun for smiling, warm is still in the sun there, but we will laugh more confident calm; \r\n如果不是太阳微笑，温暖仍然在阳光下，但我们会笑得更加自信;  \r\n    if turned to found his own shadow, appropriate escape, the sun will be through the heart,warm each place behind the corner; \r\n    如果转向发现自己的影子，适当的逃脱，太阳将通过心脏，温暖在角落后面的每个地方; \r\n    if an outstretched palm cannot fall butterfly, then clenched waving arms, given power; 如果一个伸出的棕榈不能落下蝴蝶，那就握紧挥动臂，给予功率; \r\n    if I cant have bright smile, it will face to the sunshine, and sunshine smile togeth如果我不能微笑，它将面对阳光，阳光微笑到可见\r\n  \r\n    人生忽如寄，莫辜负茶、汤、好天气。\r\n     													------codecheng\r\n    ​![](https://codecheng-1305009997.cos.ap-chengdu.myqcloud.com/img/20210602164600.jpg)',23,0,'2021-06-03 19:30:25','文学杂志'),(-125120472,'说说JAVA线程池','djc','一. 线程池简介\r\n线程池的概念\r\n\r\n​ 线程池就是首先创建一些线程，它们的集合称为线程池。使用线程池可以很好地提高性能，线程池在系统启动时即创建大量空闲的线程，程序将一个任务传给线程池，线程池就会启动一条线程来执行这个任务，执行结束以后，该线程并不会死亡，而是再次返回线程池中成为空闲状态，等待执行下一个任务。\r\n\r\n线程池的工作机制\r\n\r\n​ 在线程池的编程模式下，任务是提交给整个线程池，而不是直接提交给某个线程，线程池在拿到任务后，就在内部寻找是否有空闲的线程，如果有，则将任务交给某个空闲的线程。\r\n\r\n​ 一个线程同时只能执行一个任务，但可以同时向一个线程池提交多个任务。\r\n\r\n使用线程池的原因\r\n\r\n​ 多线程运行时间，系统不断的启动和关闭新线程，成本非常高，会过渡消耗系统资源，以及过渡切换线程的危险，从而可能导致系统资源的崩溃。这时，线程池就是最好的选择了。',7,0,'2021-06-11 08:48:37','我的Java路'),(309229080,'SSL证书有多重要？','djc',' # SSL证书有多重要？\r\n\r\n> 从某种意义上来说，SSL证书算是一款网络安全产品，因为它在保护网络安全方面起着非常重要的作用。\r\n>\r\n> \r\n\r\n互联网+时代,使用的都是http明文传输。这种传统的传输方式，没有采取任何安全防护措施，容易遭受各种互联网安全问题，比如流量劫持、钓鱼网站仿冒、中间人攻击、各种漏洞的入侵等等，严重的会危危及到财产及人身安全。\r\n\r\n为了解决这些严峻的网络安全问题，新型的超文本传输安全协议https就诞生了。https是以安全为目标的http通道，在http的基础上通过传输加密和身份认证保证了传输过程的安全性 。https在http的基础下加入SSL，https的安全基础就是部署SSL证书，它能给网站带来以下好处：\r\n\r\n### **1、隐私信息加密**\r\n\r\n> 保证隐私信息传输的机密性，保护账户安全，有效防止信息篡改，避免信息泄露。\r\n\r\n### **2、防止流量劫持**\r\n\r\n> 有效解决搜索引擎、各大站点流量劫持的困扰，杜绝搜索结果页被篡改\r\n\r\n### 3、**防止钓鱼网站及中间人攻击**\r\n\r\n> 申请SSL证书时，会对网站的身份进行验证，确认网站的真实性。确保站点安全，屏蔽骚扰攻击，钓鱼网站及中间人攻击。\r\n\r\n### **4、提升网站排名及品牌形象**\r\n\r\n> 各大搜索引擎均在大力推崇https站点，并给予这类站点更高的排名和更好的展现，为网站带来更多访问量。安装了EV SSL证书的站点还能在浏览器地址栏显示绿色的企业名称，有利于提升企业品牌形象，帮助企业获得更多利润，并且能够在与对手竞争中占据有利地位。\r\n\r\n',12,0,'2021-06-16 09:27:46','个人日志'),(344588448,'linux学习','周岭',' # 2021 最新 SpringBoot 面试题【40题】\r\n\r\n最近梳理汇总了 Java 面试常遇到的面试题，包含了 Java基础、并发、JVM、数据库、Spring、SpringMVC、SpringBoot、SpringCloud、设计模式、MQ、Linux、Docker等多个类型。\r\n\r\n今天这篇是关于 SpringBoot，总结了 40 道经典问题。\r\n\r\n### 1. SpringBoot基础\r\n\r\n#### 1.1 什么是SpringBoot？\r\n\r\n- 用来简化Spring应用的初始搭建以及开发过程，使用特定的方式来进行配置\r\n- 创建独立的Spring引用程序main方法运行\r\n- 嵌入的tomcat无需部署war文件\r\n- 简化maven配置\r\n- 自动配置Spring添加对应的功能starter自动化配置\r\n\r\n> SpringBoot来简化Spring应用开发，约定大于配置，去繁化简\r\n\r\n#### 1.2 SpringBoot有哪些优点？\r\n\r\n- 独立运行\r\n  Spring Boot 而且内嵌了各种 servlet 容器，Tomcat、Jetty 等，现在不再需要打成war 包部署到容器中，Spring Boot 只要打成一个可执行的 jar 包就能独立运行，所有的依赖包都在一个 jar 包内。\r\n- 简化配置\r\n  spring-boot-starter-web 启动器自动依赖其他组件，简少了 maven 的配置。\r\n- 自动配置\r\n  Spring Boot 能根据当前类路径下的类、jar 包来自动配置 bean，如添加一个 spring-boot-starter-web 启动器就能拥有 web 的功能，无需其他配置。\r\n- 无代码生成和XML配置\r\n  Spring Boot 配置过程中无代码生成，也无需 XML 配置文件就能完成所有配置工作，这一切都是借助于条件注解完成的，这也是 Spring4.x 的核心功能之一。\r\n- 避免大量的Maven导入和各种版本冲突\r\n- 应用监控\r\n  Spring Boot 提供一系列端点可以监控服务及应用，做健康检测。\r\n\r\n#### 1.3 SpringBoot的核心注解是什么？由那些注解组成？\r\n\r\n启动类上@SpringBootApplication是 SpringBoot 的核心注解\r\n\r\n```\r\n@Target(ElementType.TYPE)\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Documented\r\n@Inherited\r\n@SpringBootConfiguration\r\n@EnableAutoConfiguration\r\n@ComponentScan(excludeFilters = {\r\n      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),\r\n      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })\r\npublic @interface SpringBootApplication {\r\n```\r\n\r\n主要组合包含了以下 3 个注解：\r\n\r\n- @**SpringBootConfiguration**：\r\n  组合了 @Configuration 注解，实现配置文件的功能。\r\n- @**EnableAutoConfiguration**：\r\n  打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。\r\n- @**ComponentScan**：\r\n  Spring组件扫描。\r\n\r\n#### 1.4 什么是JavaConfig？\r\n\r\nSpring JavaConfig 是 Spring 社区的产品，它提供了配置 Spring IoC 容器的纯Java 方法。因此它有助于避免使用 XML 配置。使用 JavaConfig 的优点在于：\r\n\r\n- **面向对象的配置**。\r\n  由于配置被定义为 JavaConfig 中的类，因此用户可以充分利用 Java 中的面向对象功能。一个配置类可以继承另一个，重写它的@Bean 方法等。\r\n- **减少或消除 XML 配置**。\r\n  基于依赖注入原则的外化配置的好处已被证明。但是，许多开发人员不希望在 XML 和 Java 之间来回切换。JavaConfig 为开发人员提供了一种纯 Java 方法来配置与 XML 配置概念相似的 Spring 容器。从技术角度来讲，只使用 JavaConfig 配置类来配置容器是可行的，但实际上很多人认为将JavaConfig 与 XML 混合匹配是理想的。\r\n- **类型安全和重构友好**。\r\n  JavaConfig 提供了一种类型安全的方法来配置 Spring容器。由于 Java 5.0 对泛型的支持，现在可以按类型而不是按名称检索 bean，不需要任何强制转换或基于字符串的查找。\r\n\r\n#### 1.5 SpringBoot自动配置原理是什么？\r\n\r\n1. SpringBoot启动会加载大量的自动配置类\r\n2. 我们看我们需要的功能有没有在SpringBoot默认写好的自动配置类当中；\r\n3. 我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件存在在其中，我们就不需要再手动配置了）\r\n4. 给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们只需要在配置文件中指定这些属性的值即可；\r\n   xxxxAutoConfigurartion：自动配置类；给容器中添加组件\r\n\r\nxxxxProperties:封装配置文件中相关属性；\r\n\r\n#### 1.6 你如何理解SpringBoot配置加载顺序？\r\n\r\n```\r\n1. 开发者工具 &#x60;Devtools&#x60; 全局配置参数;\r\n\r\n2. 单元测试上的 &#x60;@TestPropertySource&#x60; 注解指定的参数;\r\n\r\n3. 单元测试上的 &#x60;@SpringBootTest&#x60; 注解指定的参数;\r\n\r\n4. 命令行指定的参数，如 &#x60;java -jar springboot.jar --name=&quot;码霸霸&quot;&#x60;;\r\n\r\n5. 命令行中的 &#x60;SPRING_APPLICATION_JSONJSON&#x60; 指定参数, 如 &#x60;java -Dspring.application.json=&#039;{&quot;name&quot;:&quot;码霸霸&quot;}&#039; -jar springboot.jar&#x60;;\r\n\r\n6. &#x60;ServletConfig&#x60; 初始化参数;\r\n\r\n7. &#x60;ServletContext&#x60; 初始化参数;\r\n\r\n8. JNDI参数（如 &#x60;java:comp/env/spring.application.json&#x60;）;\r\n\r\n9. Java系统参数（来源：&#x60;System.getProperties()&#x60;）;\r\n\r\n10、操作系统环境变量参数;\r\n\r\n11、&#x60;RandomValuePropertySource&#x60; 随机数，仅匹配：&#x60;ramdom.*&#x60;;\r\n\r\n12、JAR包外面的配置文件参数（&#x60;application-{profile}.properties（YAML）&#x60;）;\r\n\r\n13、JAR包里面的配置文件参数（&#x60;application-{profile}.properties（YAML）&#x60;）;\r\n\r\n14、JAR包外面的配置文件参数（&#x60;application.properties（YAML）&#x60;）;\r\n\r\n15、JAR包里面的配置文件参数（&#x60;application.properties（YAML）&#x60;）;\r\n\r\n16、&#x60;@Configuration&#x60;配置文件上 &#x60;@PropertySource&#x60; 注解加载的参数;\r\n\r\n17、默认参数（通过 &#x60;SpringApplication.setDefaultProperties&#x60; 指定）;\r\n```\r\n\r\n#### 1.7 运行 SpringBoot 有哪几种方式？\r\n\r\n1. 打包用命令或者放到容器中运行\r\n2. 用 Maven/ Gradle 插件运行\r\n3. 直接执行 main 方法运行\r\n\r\n#### 1.8 SpringBoot 需要独立的容器运行吗？\r\n\r\n可以不需要，内置了 Tomcat/ Jetty 等容器。\r\n\r\n#### 1.9 开启SpringBoot 特性有哪几种方式？\r\n\r\n1. 继承spring-boot-starter-parent项目\r\n2. 导入spring-boot-dependencies项目依赖\r\n\r\n#### 1.10 SpringBoot、Spring MVC和Spring有什么区别？\r\n\r\n- **Spring**\r\n  Spring最重要的特征是依赖注入。所有Spring Modules不是依赖注入就是IOC控制反转。\r\n  当我们恰当的使用DI或者是IOC的时候，可以开发松耦合应用。\r\n- **Spring MVC**\r\n  Spring MVC提供了一种分离式的方法来开发Web应用。通过运用像DispatcherServelet，MoudlAndView 和 ViewResolver 等一些简单的概念，开发 Web 应用将会变的非常简单。\r\n- **SpringBoot**\r\n  Spring和Spring MVC的问题在于需要配置大量的参数。\r\n  SpringBoot通过一个自动配置和启动的项来解决这个问题。\r\n\r\n#### 1.11 SpringBoot启动时都做了什么?\r\n\r\n1. SpringBoot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值\r\n2. 将这些值作为自动配置类导入容器 ， 自动配置类就生效 ， 帮我们进行自动配置工作；\r\n3. 整个J2EE的整体解决方案和自动配置都在springboot-autoconfigure的jar包中；\r\n4. 它会给容器中导入非常多的自动配置类 （xxxAutoConfiguration）, 就是给容器中导入这个场景需要的所有组件 ， 并配置好这些组件 ；\r\n5. 有了自动配置类 ， 免去了我们手动编写配置注入功能组件等的工作；\r\n\r\n### 2. SpringBoot配置\r\n\r\n#### 2.1 什么是YAML？\r\n\r\nYAML 是一种人类可读的数据序列化语言。它通常用于配置文件。与属性文件相比，如果我们想要在配置文件中添加复杂的属性，YAML 文件就更加结构化，而且更少混淆。可以看出 YAML 具有分层配置数据。\r\n\r\n#### 2.2 YAML 配置的优势在哪里 ?\r\n\r\nYAML 现在可以算是非常流行的一种配置文件格式了，无论是前端还是后端，都可以见到 YAML 配置。那么 YAML 配置和传统的 properties 配置相比到底有哪些优势呢？\r\n\r\n1. 配置有序，在一些特殊的场景下，配置有序很关键\r\n2. 支持数组，数组中的元素可以是基本数据类型也可以是对象\r\n3. 简洁\r\n\r\n相比 properties 配置文件，YAML 还有一个缺点，就是不支持 @PropertySource 注解导入自定义的 YAML 配置。\r\n\r\n#### 2.3 SpringBoot 是否可以使用 XML 配置 ?\r\n\r\nSpring Boot 推荐使用 Java 配置而非 XML 配置，但是 Spring Boot 中也可以使用 XML 配置，通过 @ImportResource 注解可以引入一个 XML 配置。\r\n\r\n#### 2.4 SpringBoot核心配置文件是什么？\r\n\r\nbootstrap.properties和application.properties\r\n\r\n#### 2.5 bootstrap.properties和application.properties 有何区别 ?\r\n\r\nSpringBoot两个核心的配置文件：\r\n\r\n- **bootstrap**(.yml 或者 .properties)：boostrap 由父 ApplicationContext 加载的，比applicaton优先加载，配置在应用程序上下文的引导阶段生效。一般来说我们在 SpringCloud Config 或者Nacos中会用到它。且boostrap里面的属性不能被覆盖；\r\n- **application** (.yml或者.properties)：由ApplicatonContext 加载，用于 SpringBoot项目的自动化配置。\r\n\r\n#### 2.6 什么是Spring Profiles？\r\n\r\n主要用来**区分环境**；\r\nSpring Profiles 允许用户根据配置文件（dev，test，prod 等）来注册 bean。因此，当应用程序在开发中运行时，只有某些 bean 可以加载，而在 PRODUCTION中，某些其他 bean 可以加载。假设我们的要求是 Swagger 文档仅适用于 QA 环境，并且禁用所有其他文档。这可以使用配置文件来完成。Spring Boot 使得使用配置文件非常简单。\r\n\r\n#### 2.7 如何在自定义端口上运行SpringBoot应用程序？\r\n\r\nSpringBoot默认监听的是8080端口；为了在自定义端口上运行 SpringBoot 应用程序，您可以在application.properties 中通过\r\n\r\n```\r\nserver.port = 8888\r\n```\r\n\r\n指定端口；这样就可以将监听的端口修改为8888。\r\n\r\n### 3. SpringBoot安全性\r\n\r\n#### 3.1 如何实现SpringBoot应用程序的安全性？\r\n\r\n为了实现SpringBoot的安全性，我们使用spring-boot-starter-security依赖项，并且必须添加安全配置。它只需要很少的代码。配置类将必须扩展WebSecurityConfigurerAdapter并覆盖其方法。\r\n\r\n#### 3.2 比较一下Spring Security 和Shiro各自的优缺点 ?\r\n\r\n由于SpringBoot官方提供了大量的非常方便的开箱即用的Starter，包括Spring Security的Starter ，使得在 SpringBoot中使用Spring Security变得更加容易，甚至只需要添加一个依赖就可以保护所有的接口，所以，如果是SpringBoot 项目，一般选择 Spring Security 。当然这只是一个建议的组合，单纯从技术上来说，无论怎么组合，都是没有问题的。Shiro和Spring Security相比，主要有如下一些特点：\r\n\r\n1. Spring Security 是一个重量级的安全管理框架；Shiro 则是一个轻量级的安全管理框架\r\n2. Spring Security 概念复杂，配置繁琐；Shiro 概念简单、配置简单\r\n3. Spring Security 功能强大；Shiro 功能简单\r\n\r\n#### 3.3 SpringBoot中如何解决跨域问题 ?\r\n\r\n跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing） 来解决跨域问题。这种解决方案并非 Spring Boot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。\r\n\r\n```\r\n@Configuration\r\npublic class CorsConfig implements WebMvcConfigurer {\r\n    @Override\r\n    public void addCorsMappings(CorsRegistry registry) {\r\n        registry.addMapping(&quot;/**&quot;)\r\n                .allowedOrigins(&quot;*&quot;)\r\n                .allowCredentials(true)\r\n                .allowedMethods(&quot;GET&quot;, &quot;POST&quot;, &quot;PUT&quot;, &quot;DELETE&quot;, &quot;OPTIONS&quot;)\r\n                .maxAge(3600);\r\n    }\r\n}\r\n```\r\n\r\n项目中前后端分离部署，所以需要解决跨域的问题。\r\n我们使用cookie存放用户登录的信息，在spring拦截器进行权限控制，当权限不符合时，直接返回给用户固定的json结果。\r\n当用户登录以后，正常使用；当用户退出登录状态时或者token过期时，由于拦截器和跨域的顺序有问题，出现了跨域的现象。\r\n我们知道一个http请求，先走filter，到达servlet后才进行拦截器的处理，如果我们把cors放在filter里，就可以优先于权限拦截器执行。\r\n\r\n```\r\n@Configuration\r\npublic class CorsConfig {\r\n    @Bean\r\n    public CorsFilter corsFilter() {\r\n        CorsConfiguration corsConfiguration = new CorsConfiguration();\r\n        corsConfiguration.addAllowedOrigin(&quot;*&quot;);\r\n        corsConfiguration.addAllowedHeader(&quot;*&quot;);\r\n        corsConfiguration.addAllowedMethod(&quot;*&quot;);\r\n        corsConfiguration.setAllowCredentials(true);\r\n        UrlBasedCorsConfigurationSource urlBasedCorsConfigurationSource = new UrlBasedCorsConfigurationSource();\r\n        urlBasedCorsConfigurationSource.registerCorsConfiguration(&quot;/**&quot;, corsConfiguration);\r\n        return new CorsFilter(urlBasedCorsConfigurationSource);\r\n    }\r\n}\r\n```\r\n\r\n#### 3.4 什么是 CSRF 攻击？\r\n\r\nCSRF 代表跨站请求伪造。这是一种攻击，迫使最终用户在当前通过身份验证的Web 应用程序上执行不需要的操作。CSRF 攻击专门针对状态改变请求，而不是数据窃取，因为攻击者无法查看对伪造请求的响应。\r\n\r\n#### 3.5 SpringBoot 中的监视器是什么\r\n\r\nSpring boot actuator是spring启动框架中的重要功能之一。Spring boot监视器可帮助您访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向相关人员触发警报消息。监视器模块公开了一组可直接作为HTTPURL访问的REST端点来检查状态。\r\n\r\n```\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;\r\n    &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\r\n    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;\r\n&lt;/dependency&gt;\r\nserver.tomcat.uri-encoding=UTF-8\r\n# 程序运行端口\r\nserver.port=8888\r\n# 监视程序运行端口\r\nmanagement.server.port=8090\r\n# 激活所有的内置Endpoints\r\nmanagement.endpoints.web.exposure.include=*\r\n# 开启shutdown这个endpoint\r\nmanagement.endpoint.shutdown.enabled=true\r\n```\r\n\r\n#### 3.6 如何在SpringBoot中禁用Actuator端点安全性？\r\n\r\n默认情况下，所有敏感的HTTP端点都是安全的，只有具有ACTUATOR角色的用户才能访问它们。安全性是使用标准的\r\n`HttpServletRequest.isUserlnRole` 方法实施的。我们可以使用 `management.security.enabled=false`来禁用安全性。只有在执行机构端点在防火墙后访问时，才建议禁用安全性。\r\n\r\n#### 3.7 如何监视所有SpringBoot微服务？\r\n\r\nSpringBoot提供监视器端点以监控各个微服务的度量。这些端点对于获取有关应用程序的信息（如它们是否已启动）以及它们的组件（如数据库等）是否正常运行很有帮助。但是，使用监视器的一个主要缺点或困难是，我们必须单独打开应用程序的知识点以了解其状态或健康状况。想象一下涉及 50 个应用程序的微服务，管理员将不得不击中所有 50 个应用程序的执行终端。为了帮助我们处理这种情况，我们将使用位于的开源项目。 它建立在 Spring Boot Actuator 之上，它提供了一个 Web UI，使我们能够可视化多个应用程序的度量。\r\n\r\n### 4. SpringBoot进阶\r\n\r\n#### 4.1 什么是 WebSockets？\r\n\r\nWebSocket是一种计算机通信协议，通过单个TCP连接提供全双工通信信道。\r\n\r\n1. WebSocket是双向的 -使用 WebSocket 客户端或服务器可以发起消息发送。\r\n2. WebSocket是全双工的 -客户端和服务器通信是相互独立的。\r\n3. 单个TCP连接 -初始连接使用 HTTP，然后将此连接升级到基于套接字的连接。然后这个单一连接用于所有未来的通信\r\n4. Light与http相比，WebSocket消息数据交换要轻得多。\r\n\r\n#### 4.2 什么是 Spring Data?\r\n\r\nSpring Data 是 Spring 的一个子项目。用于简化数据库访问，支持NoSQL 和 关系数据存储。其主要目标是使数据库的访问变得方便快捷。Spring Data 具有如下特点：\r\n\r\nSpringData 项目支持 NoSQL 存储：\r\n\r\n1. MongoDB （文档数据库）\r\n2. Neo4j（图形数据库）\r\n3. Redis（键/值存储）\r\n4. Hbase（列族数据库）\r\n\r\nSpringData 项目所支持的关系数据存储技术：\r\n\r\n1. JDBC\r\n2. JPA\r\n\r\nSpring Data Jpa 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就是声明持久层的接口，其他都交给 Spring Data JPA 来帮你完成！Spring Data JPA 通过规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。\r\n\r\n#### 4.3 什么是 Spring Batch？\r\n\r\nSpring Boot Batch 提供可重用的函数，这些函数在处理大量记录时非常重要，包括日志/跟踪，事务管理，作业处理统计信息，作业重新启动，跳过和资源管理。它还提供了更先进的技术服务和功能，通过优化和分区技术，可以实现极高批量和高性能批处理作业。简单以及复杂的大批量批处理作业可以高度可扩展的方式利用框架处理重要大量的信息。\r\n\r\n#### 4.4 什么是 FreeMarker 模板？\r\n\r\nFreeMarker 是一个基于 Java 的模板引擎，最初专注于使用 MVC 软件架构进行动态网页生成。使用 Freemarker 的主要优点是表示层和业务层的完全分离。程序员可以处理应用程序代码，而设计人员可以处理 html 页面设计。最后使用freemarker 可以将这些结合起来，给出最终的输出页面。\r\n\r\n#### 4.5 如何集成 SpringBoot和ActiveMQ？\r\n\r\n对于集成 Spring Boot 和 ActiveMQ，我们使用依赖关系。 它只需要很少的配置，并且不需要样板代码。\r\n\r\n#### 4.6 Swagger用过麽？他用来做什么？\r\n\r\nSwagger广泛用于可视化API，使用SwaggerUl**为前端开发人员提供在线沙箱**。Swagger 是用于生成RESTful Web服务的可视化表示的工具，规范和完整框架实现。它**使文档能够以与服务器相同的速度更新**。当通过Swagger 正确定义时，消费者可以使用最少量的实现逻辑来理解远程服务并与其进行交互。因此，Swagger 消除了调用服务时的猜测。\r\n\r\n```\r\n&lt;!--https://mvnrepository.com/artifact/io.springfox/springfox-swagger2--&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\r\n    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;\r\n    &lt;version&gt;2.9.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;!--https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui--&gt;\r\n&lt;dependency&gt;\r\n    &lt;groupId&gt;io.springfox&lt;/groupId&gt;\r\n    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;\r\n    &lt;version&gt;2.9.2&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n```\r\n\r\n#### 4.7 前后端分离，如何维护接口文档 ?\r\n\r\n前后端分离开发日益流行，大部分情况下，我们都是通过 Spring Boot 做前后端分离开发，前后端分离一定会有接口文档，不然会前后端会深深陷入到扯皮中。一个比较笨的方法就是使用 word 或者 md 来维护接口文档，但是效率太低，接口一变，所有人手上的文档都得变。在 Spring Boot 中，这个问题常见的解决方案是 Swagger ，使用 Swagger 我们可以快速生成一个接口文档网站，接口一旦发生变化，文档就会自动更新，所有开发工程师访问这一个在线网站就可以获取到最新的接口文档，非常方便。\r\n\r\n#### 4.8 SpringBoot项目如何热部署？\r\n\r\n这可以使用 DEV 工具来实现。通过这种依赖关系，您可以节省任何更改，嵌入式tomcat 将重新启动。Spring Boot 有一个开发工具（DevTools）模块，它有助于提高开发人员的生产力。Java 开发人员面临的一个主要挑战是将文件更改自动部署到服务器并自动重启服务器。开发人员可以重新加载 Spring Boot 上的更改，而无需重新启动服务器。这将消除每次手动部署更改的需要。Spring Boot 在发布它的第一个版本时没有这个功能。这是开发人员最需要的功能。DevTools 模块完全满足开发人员的需求。该模块将在生产环境中被禁用。它还提供 H2 数据库控制台以更好地测试应用程序。\r\n\r\n```\r\n    org.springframework.boot\r\n    spring-boot-devtools\r\n```\r\n\r\n#### 4.9 SpringBoot 中的starter到底是什么 ?\r\n\r\n首先，这个 Starter 并非什么新的技术点，基本上还是基于 Spring 已有功能来实现的。首先它提供了一个自动化配置类，一般命名为 `XXXAutoConfiguration` ，在这个配置类中通过条件注解来决定一个配置是否生效（条件注解就是 Spring 中原本就有的），然后它还会提供一系列的默认配置，也允许开发者根据实际情况自定义相关配置，然后通过类型安全的属性注入将这些配置属性注入进来，新注入的属性会代替掉默认属性。正因为如此，很多第三方框架，我们只需要引入依赖就可以直接使用了。当然，开发者也可以自定义 Starter\r\n\r\n#### 4.10 spring-boot-starter-parent 有什么用?\r\n\r\n新创建一个 SpringBoot 项目，默认都是有 parent 的，这个 parent 就是 spring-boot-starter-parent ，spring-boot-starter-parent 主要有如下作用：\r\n\r\n1. 定义了 Java 编译版本为 1.8 。\r\n2. 使用 UTF-8 格式编码。\r\n3. 继承自 spring-boot-dependencies，这个里边定义了依赖的版本，也正是因为继承了这个依赖，所以我们在写依赖时才不需要写版本号。\r\n4. 执行打包操作的配置。\r\n5. 自动化的资源过滤。\r\n6. 自动化的插件配置。\r\n7. 针对 application.properties 和 application.yml 的资源过滤，包括通过 profile 定义的不同环境的配置文件，例如 application-dev.properties 和 application-dev.yml。\r\n\r\n#### 4.11 SpringBoot 打成的jar和普通的jar有什么区别 ?\r\n\r\nSpring oot 项目最终打包成的 jar 是可执行 jar ，这种 jar 可以直接通过 `java -jar xxx.jar` 命令来运行，这种 jar 不可以作为普通的 jar 被其他项目依赖，即使依赖了也无法使用其中的类。\r\n\r\nSpringBoot 的 jar 无法被其他项目依赖，主要还是他和普通 jar 的结构不同。普通的 jar 包，解压后直接就是包名，包里就是我们的代码，而 Spring Boot 打包成的可执行 jar 解压后，在 `\\BOOT-INF\\classes` 目录下才是我们的代码，因此无法被直接引用。如果非要引用，可以在 pom.xml 文件中增加配置，将 Spring Boot 项目打包成两个 jar ，一个可执行，一个可引用。\r\n\r\n#### 4.12 如何使用SpringBoot实现异常处理？\r\n\r\nSpring 提供了一种使用 ControllerAdvice 处理异常的非常有用的方法。 我们通过实现一个 ControlerAdvice 类，来处理控制器类抛出的所有异常。\r\n\r\n#### 4.13 如何使用SpringBoot实现分页和排序？\r\n\r\n使用Spring Boot实现分页非常简单。使用Spring Data-JPA可以实现将可分页的 `org.springframework.data.domain.Pageable`传递给存储库方法。\r\n\r\n```\r\npublic Page find(Integer page, Integer size) {    if (null == page) {        page = 0;    }    if (CheckUtils.isEmpty(size)) {        size = 10;    }    PageRequest pageable = PageRequest.of(page, size, Sort.Direction.DESC, &quot;updateTime&quot;);    Page users = userRepository.findAll(pageable);    return users;}\r\n```\r\n\r\n#### 4.14 微服务中如何实现 session 共享?\r\n\r\n在微服务中，一个完整的项目被拆分成多个不相同的独立的服务，各个服务独立部署在不同的服务器上，各自的 session 被从物理空间上隔离开了，但是经常，我们需要在不同微服务之间共享 session ，常见的方案就是 Spring Session + Redis 来实现 session 共享。将所有微服务的 session 统一保存在 Redis 上，当各个微服务对 session 有相关的读写操作时，都去操作 Redis 上的 session 。这样就实现了 session 共享，Spring Session 基于 Spring 中的代理过滤器实现，使得 session 的同步操作对开发人员而言是透明的，非常简便。\r\n\r\n#### 4.15 SpringBoot 中如何实现定时任务?\r\n\r\n定时任务也是一个常见的需求，SpringBoot 中对于定时任务的支持主要还是来自 Spring 框架。\r\n\r\n在 SpringBoot 中使用定时任务主要有两种不同的方式，一个就是使用 Spring 中的 @Scheduled 注解，另一个则是使用第三方框架 Quartz。\r\n\r\n- 使用Spring中的 @Scheduled的方式主要通过@Scheduled注解来实现。\r\n- 使用Quartz，则按照Quartz的方式，定义Job和Trigger即可。',16,2,'2021-06-16 19:17:06','我的Java路'),(347755847,'你不能就这样死去-诗与故事','曾伟丽','你不能就这样死去-诗与故事\r\n\r\n\r\n\r\n我一直不敢和你通电话\r\n\r\n我知道你一直在绝望中挣扎\r\n\r\n一直在希望着… 希望着…\r\n\r\n你也对我说过\r\n\r\n希望自己能早一点离开这个世界\r\n\r\n可是… 你可以可以先等等我…\r\n\r\n无能为力的看着这一切的发生\r\n\r\n无法陪在你身边 直到生命的尽头\r\n\r\n我们相隔一片海\r\n\r\n我们也都在和自己做斗争\r\n\r\n但我还希望你能看到… 很多… 很多个明天\r\n\r\n我终于鼓起勇气拨通了你的电话\r\n\r\n在电话里听到了你\r\n\r\n费力说话… 却还是嘶哑的声音\r\n\r\n最近你说话越来越费力\r\n\r\n说一句要喘好几口气\r\n\r\n声音更沙哑了\r\n\r\n你说 病情恶化的很快\r\n\r\n手已经破皮了\r\n\r\n吃了很多药\r\n\r\n有没有任何办法\r\n\r\n你也不想这么早死去\r\n\r\n你说 你还想在走之前 看我一眼\r\n\r\n不见到我 就不落下最后一口气\r\n\r\n但愿能等的到我回去\r\n\r\n眼泪停不下\r\n\r\n我一直在哭\r\n\r\n我一直再说 不会的… 不会的… 你会好起来的…\r\n\r\n还记得我生日那天… 别人给你给我们… 拍的照片吗?\r\n\r\n我真的不愿意那成为你的遗照\r\n\r\n或许… 我不过这个生日… 你就不会离开了.\r\n\r\n我已经不知道自己要鼓起多大的勇气\r\n\r\n才能再次拨通你的电话了\r\n\r\n我还接受不了…\r\n\r\n听到那句无法接通无限循环\r\n\r\n所以你先等等我好不好？\r\n\r\n先… 等等我… ',2,1,'2021-06-16 20:09:53','文学杂志'),(348242545,'数据库设计','杨小倩','# 一、数据库设计\r\n\r\n## 1.1 项目背景\r\n\r\n​        随着互联网的发展，越来越多的人拥有了自己的个人博客。但是大多数采用的是网上别人做好的博客模板，众所周知，网上的模板并不是单独为个人而定制，**而是面向大多数人的**，独立设计一个博客，满足自己的需求。\r\n\r\n## 1.2 分析\r\n\r\n- 系统主要完成以下几方面的功能：\r\n- 用户管理：用户的注册和登录，发表博文和评论。\r\n- 博文管理：用户可以在网站中发表和设置博文。\r\n- 评论管理：用户可以评论博文和回复其他用户的评论。\r\n- 分类管理：添加和删除分类，给文章设置分类。\r\n- 标签管理：添加和删除标签，给文章设置标签。\r\n\r\n## 1.3 系统功能\r\n\r\n### 1.3.1 用户管理\r\n\r\n用户的相关信息如下：用户ID、用户IP、用户名、用户昵称、用户密码、用户邮箱、用户头像、注册时间、用户生日、用户年龄、用户手机号。\r\n\r\n用户注册时需提供用户名、用户密码、用户邮箱或用户手机号。\r\n\r\n用户登录时可以采用用户名或邮箱或手机号进行登录。\r\n\r\n用户可以发布博文、发表评论、回复，还可以添加其他用户为好友。\r\n\r\n\r\n### 1.3.2 博文管理\r\n\r\n博文的相关信息如下：博文ID、发布日期、发表用户、博文标题、博文内容、点赞数、回复数、游览量。\r\n\r\n博文可以被普通用户发布、修改、删除和评论，但修改和删除仅限于自己发表的动态。\r\n\r\n博文发布时需要设置分类、标签。\r\n\r\n### 1.3.3 评论管理\r\n\r\n评论的相关信息如下：评论ID、评论日期、点赞数、发表用户、评论文章ID、评论内。\r\n\r\n评论可以被用户发表和删除以及被其他用户回复。\r\n\r\n### 1.3.4 分类管理\r\n\r\n分类的相关信息如下：分类ID、分类名称、分类别名、分类描述、父分类ID。\r\n\r\n只有管理员可以添加、删除、修改分类。\r\n\r\n分类的作用不仅可以将文章分类，还可以作为博客的菜单。\r\n\r\n### 1.3.5 标签管理\r\n\r\n标签的相关信息如下：标签ID、标签名称、标签别名、标签描述。\r\n\r\n用户发表文章时可以设置标签，标签不仅可以将文章分类，还可以作为博客的菜单。\r\n\r\n\r\n\r\n\r\n\r\n',4,1,'2021-06-16 20:18:00','其他');

/*Table structure for table `comment` */

DROP TABLE IF EXISTS `comment`;

CREATE TABLE `comment` (
  `comment_id` bigint(20) NOT NULL,
  `user_id` varchar(20) NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `comment_time` datetime DEFAULT NULL,
  `comment_content` text,
  `comment_ip` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`comment_id`),
  KEY `comment_tuser__fk` (`user_id`),
  KEY `comment_article__fk` (`article_id`),
  CONSTRAINT `comment_article__fk` FOREIGN KEY (`article_id`) REFERENCES `article` (`article_id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `comment_tuser__fk` FOREIGN KEY (`user_id`) REFERENCES `tuser` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `comment` */

insert  into `comment`(`comment_id`,`user_id`,`article_id`,`comment_time`,`comment_content`,`comment_ip`) values (348333191,'djc',344588448,'2021-06-16 20:19:31','可以哦','0:0:0:0:0:0:0:1'),(348356540,'djc',347755847,'2021-06-16 20:19:54','进击的攻城狮成员--ui设计','0:0:0:0:0:0:0:1'),(348380806,'djc',348242545,'2021-06-16 20:20:18','进击的攻城狮成员--数据库设计','0:0:0:0:0:0:0:1'),(501597916,'codecheng',344588448,'2021-06-18 14:53:55','评论测试','0:0:0:0:0:0:0:1');

/*Table structure for table `links` */

DROP TABLE IF EXISTS `links`;

CREATE TABLE `links` (
  `links_id` bigint(20) NOT NULL,
  `links_name` varchar(50) NOT NULL,
  `links_title` longtext NOT NULL,
  `links_url` varchar(255) NOT NULL,
  `links_img` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`links_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `links` */

insert  into `links`(`links_id`,`links_name`,`links_title`,`links_url`,`links_img`) values (1,'codecheng','抬头仰望满天繁星，为你绽放闪烁不息','https://www.codecheng.com/','https://codecheng-1305009997.cos.ap-chengdu.myqcloud.com/img/20210501222811.webp'),(2,'雨中散步撒哈拉','只有创造，才是真正的享受，只有拚搏，才是充实的生活。','http://liudongdong.top/','http://liudongdong.top/avatar'),(3,'百度','这是百度','https://www.baidu.com/','https://www.baidu.com/favicon.ico'),(5,'闲花手札','一名追求技术喜欢安静的程序猿','https://islu.cn/','https://avatars.githubusercontent.com/u/69854983?v=4');

/*Table structure for table `message` */

DROP TABLE IF EXISTS `message`;

CREATE TABLE `message` (
  `message_id` bigint(20) NOT NULL,
  `user_id` varchar(20) NOT NULL,
  `message_content` longtext NOT NULL,
  `message_time` datetime DEFAULT NULL,
  `message_parant_id` bigint(20) DEFAULT NULL,
  `message_ip` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`message_id`),
  KEY `message_tuser__fk` (`user_id`),
  CONSTRAINT `message_tuser__fk` FOREIGN KEY (`user_id`) REFERENCES `tuser` (`user_id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `message` */

insert  into `message`(`message_id`,`user_id`,`message_content`,`message_time`,`message_parant_id`,`message_ip`) values (-790049127,'djc','我不再装模作样地拥有很多朋友，而是回到了孤独之中，以真正的我开始了独自的生活。” 与其浪费时间精力，去做一些无用的社交，不如耐心沉淀，在岁月中反观自身。','2021-06-03 16:06:28',NULL,'0:0:0:0:0:0:0:1'),(-790036390,'djc','哈哈哈  测试一下','2021-06-03 16:06:41',NULL,'0:0:0:0:0:0:0:1'),(253085598,'djc','你的压力来源于无法自律，只是假装努力，现状跟不上内心欲望，所以你焦虑又恐慌。','2021-06-15 17:52:03',NULL,'0:0:0:0:0:0:0:1'),(253202049,'djc','去找一个像太阳一样的人\n帮你晒晒所有不值一提的迷茫','2021-06-15 17:53:59',NULL,'0:0:0:0:0:0:0:1'),(253320115,'codecheng','什么都不做，才会来不及','2021-06-15 17:55:58',NULL,'0:0:0:0:0:0:0:1'),(253367466,'codecheng','If not to the sun for smiling, warm is still in the sun there, but we will laugh more confident calm; if turned to found his own shadow, appropriate escape, the sun will be through the heart,warm each place behind the corner; if an outstretched palm cannot fall butterfly, then clenched waving arms, given power; if I cant have bright smile, it will face to the sunshine, and sunshine smile togeth','2021-06-15 17:56:45',NULL,'0:0:0:0:0:0:0:1'),(309300035,'djc','评论测试','2021-06-16 09:28:57',NULL,'0:0:0:0:0:0:0:1'),(396330031,'曾伟丽','我是进击的攻城狮的成员,负责msos博客论坛的ui设计','2021-06-17 09:39:27',NULL,'0:0:0:0:0:0:0:1'),(396403541,'周岭','我是进击的攻城狮的成员,负责msos博客论坛的前端开发，炫酷的样式都是我和msos团队负责的哦','2021-06-17 09:40:41',NULL,'0:0:0:0:0:0:0:1'),(396447894,'杨小倩','我是进击的攻城狮的成员,负责msos数据库设计部分','2021-06-17 09:41:25',NULL,'10.60.27.211'),(442680465,'codecheng','项目快结束了，一点一点的做总是来得及，但还需要一点点的热情,加油！！！','2021-06-17 22:31:58',NULL,'0:0:0:0:0:0:0:1'),(501668740,'codecheng','项目完工预计在2021.6.23','2021-06-18 14:55:06',NULL,'0:0:0:0:0:0:0:1');

/*Table structure for table `tuser` */

DROP TABLE IF EXISTS `tuser`;

CREATE TABLE `tuser` (
  `user_id` varchar(20) NOT NULL COMMENT '用户ID',
  `user_ip` varchar(255) DEFAULT NULL COMMENT '用户IP',
  `user_password` varchar(15) NOT NULL COMMENT '用户密码',
  `user_email` varchar(30) NOT NULL COMMENT '用户邮箱',
  `user_role` varchar(10) DEFAULT NULL COMMENT '权限',
  `user_birthday` date DEFAULT NULL COMMENT '用户生日',
  `user_sex` varchar(2) DEFAULT NULL COMMENT '用户性别',
  `user_phone` varchar(20) DEFAULT NULL COMMENT '用户手机号',
  `user_name` varchar(20) DEFAULT NULL COMMENT '用户昵称',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `user_email` (`user_email`),
  KEY `user_name` (`user_name`),
  KEY `user_phone` (`user_phone`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `tuser` */

insert  into `tuser`(`user_id`,`user_ip`,`user_password`,`user_email`,`user_role`,`user_birthday`,`user_sex`,`user_phone`,`user_name`) values ('@#$%sd',NULL,'!@#$1234','test@msos.com','user',NULL,'男','11122223333','test'),('@#%',NULL,'123456','dd@qq.com','user',NULL,'男','12345678909','33'),('@@@@@@',NULL,'123456','msosdyzz@abc.club','user',NULL,'男','11122223333','2#%'),('admin','0:0:0:0:0:0:0:1','123456','2574833532@qq.com','admin',NULL,'男','18084385896','代镓丞'),('bugtest@!#@!#!@',NULL,'!@#$%1234','bugtest@msos.com','user',NULL,'男','11111111111','bugtest'),('codecheng','0:0:0:0:0:0:0:1','123456','likeyou@icu.com','user',NULL,'男','13765711699','codecheng'),('djc','0:0:0:0:0:0:0:1','12345678','djc2574833532@163.com','user',NULL,'男','18708662866','小Dai~'),('周岭','0:0:0:0:0:0:0:1','123456','zl@msos.club','user',NULL,'女','15511112222','周岭'),('曾伟丽','0:0:0:0:0:0:0:1','123456','zwl@msos.club','user','2021-06-18','男','14412341234','曾伟丽'),('杨小倩','10.60.27.211','123456','yxq@msos.club','user',NULL,'男','12341234123','杨小倩');

/*Table structure for table `updatearticle` */

DROP TABLE IF EXISTS `updatearticle`;

CREATE TABLE `updatearticle` (
  `updateArticle_id` varchar(20) NOT NULL,
  `article_id` bigint(20) NOT NULL,
  `updateArticle_do` varchar(20) NOT NULL,
  `updateArticle_time` datetime DEFAULT NULL,
  `updateArticle_ip` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `updatearticle` */

insert  into `updatearticle`(`updateArticle_id`,`article_id`,`updateArticle_do`,`updateArticle_time`,`updateArticle_ip`) values ('501664112',1342248537,'提交文章','2021-05-09 15:21:59','0:0:0:0:0:0:0:1'),('5016641123',1453075056,'提交文章','2021-05-10 22:09:05','0:0:0:0:0:0:0:1'),('501664112',1342248537,'删除文章','2021-05-10 22:09:47','0:0:0:0:0:0:0:1'),('501664112',1342138147,'删除文章','2021-05-10 22:09:49','0:0:0:0:0:0:0:1'),('501664112',1342061235,'删除文章','2021-05-10 22:09:52','0:0:0:0:0:0:0:1'),('501664112',1341773566,'删除文章','2021-05-10 22:09:54','0:0:0:0:0:0:0:1'),('djc',-777999671,'提交文章','2021-06-03 19:27:18','0:0:0:0:0:0:0:1'),('djc',-777812098,'提交文章','2021-06-03 19:30:25','0:0:0:0:0:0:0:1'),('djc',309229080,'提交文章','2021-06-16 09:27:46','0:0:0:0:0:0:0:1'),('周岭',344588448,'提交文章','2021-06-16 19:17:06','0:0:0:0:0:0:0:1'),('曾伟丽',347755847,'提交文章','2021-06-16 20:09:53','0:0:0:0:0:0:0:1'),('曾伟丽',348077980,'提交文章','2021-06-16 20:15:15','0:0:0:0:0:0:0:1'),('admin',348077980,'删除文章','2021-06-16 20:17:14','0:0:0:0:0:0:0:1'),('杨小倩',348242545,'提交文章','2021-06-16 20:18:00','0:0:0:0:0:0:0:1');

/*Table structure for table `updateuser` */

DROP TABLE IF EXISTS `updateuser`;

CREATE TABLE `updateuser` (
  `updateUser_id` varchar(20) NOT NULL,
  `user_id` varchar(20) NOT NULL,
  `updateUser_do` varchar(20) NOT NULL,
  `updateUser_time` datetime DEFAULT NULL,
  `updateUser_ip` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `updateuser` */

insert  into `updateuser`(`updateUser_id`,`user_id`,`updateUser_do`,`updateUser_time`,`updateUser_ip`) values ('501664112','501664112','用户登录','2021-05-09 14:38:15','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 14:57:57','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 14:58:06','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:02:54','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:03:08','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:03:16','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:04:09','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:13:50','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:18:38','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:19:54','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:19:58','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:21:44','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:21:46','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:22:08','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:25:35','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:26:02','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:26:37','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:30:34','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:31:58','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:37:00','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:38:31','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:38:43','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:38:46','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:39:25','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-09 15:41:28','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 20:50:30','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 21:22:49','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 21:23:13','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 22:01:03','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 22:01:11','0:0:0:0:0:0:0:1'),('33310101','501664112','用户删除','2021-05-10 22:01:15','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 22:07:29','0:0:0:0:0:0:0:1'),('5016641123','5016641123','用户登录','2021-05-10 22:08:18','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 22:09:15','0:0:0:0:0:0:0:1'),('5016641123','501664112','用户删除','2021-05-10 22:10:08','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 23:15:46','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 23:34:53','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 23:47:13','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 23:48:06','0:0:0:0:0:0:0:1'),('501664112','501664112','用户登录','2021-05-10 23:48:14','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-03 15:56:13','0:0:0:0:0:0:0:1'),('5016641124','5016641124','用户登录','2021-06-03 15:57:25','0:0:0:0:0:0:0:1'),('admin','5016641124','用户更新','2021-06-03 15:57:38','0:0:0:0:0:0:0:1'),('501664112','5016641124','用户更新','2021-06-03 15:57:40','0:0:0:0:0:0:0:1'),('5016641124','5016641124','用户更新','2021-06-03 15:57:41','0:0:0:0:0:0:0:1'),('18263326447','5016641124','用户删除','2021-06-03 15:57:47','0:0:0:0:0:0:0:1'),('501664112','5016641124','用户删除','2021-06-03 15:57:54','0:0:0:0:0:0:0:1'),('5016641124','5016641124','用户删除','2021-06-03 15:58:01','0:0:0:0:0:0:0:1'),('yh','5016641124','用户删除','2021-06-03 15:58:05','0:0:0:0:0:0:0:1'),('zengxuebin','5016641124','用户删除','2021-06-03 15:58:09','0:0:0:0:0:0:0:1'),('我的牛子有点大','5016641124','用户删除','2021-06-03 15:58:18','0:0:0:0:0:0:0:1'),('韩大大','5016641124','用户删除','2021-06-03 15:58:21','0:0:0:0:0:0:0:1'),('松皇迷弟','5016641124','用户删除','2021-06-03 15:58:24','0:0:0:0:0:0:0:1'),('呜呜呜','5016641124','用户更新','2021-06-03 15:58:26','0:0:0:0:0:0:0:1'),('呜呜呜','5016641124','用户删除','2021-06-03 15:58:28','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-03 16:06:06','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-03 16:55:50','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-03 16:57:23','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-03 16:58:04','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-03 18:57:53','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-03 19:00:10','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-03 19:26:57','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-03 19:31:11','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-03 20:13:40','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-03 23:08:39','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-11 09:53:20','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-11 10:25:46','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-11 10:26:31','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-14 17:25:19','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-14 17:47:39','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-14 18:02:10','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:40:27','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:42:42','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:47:14','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:49:05','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:49:08','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:50:25','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:53:53','0:0:0:0:0:0:0:1'),('admin','admin','用户更新','2021-06-15 08:54:01','0:0:0:0:0:0:0:1'),('admin','admin','用户更新','2021-06-15 08:54:01','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 08:57:41','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:10:12','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:15:04','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:15:58','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:18:13','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:19:10','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:29:02','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:31:02','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:34:50','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:36:32','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 09:41:09','0:0:0:0:0:0:0:1'),('@#%','admin','用户更新','2021-06-15 09:42:28','0:0:0:0:0:0:0:1'),('djc','admin','用户更新','2021-06-15 09:42:29','0:0:0:0:0:0:0:1'),('djc','admin','用户更新','2021-06-15 09:42:30','0:0:0:0:0:0:0:1'),('admin','admin','用户更新','2021-06-15 09:42:30','0:0:0:0:0:0:0:1'),('@#%','admin','用户更新','2021-06-15 09:42:31','0:0:0:0:0:0:0:1'),('admin','admin','用户更新','2021-06-15 09:42:33','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-15 17:16:55','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-15 17:28:10','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-15 17:51:55','0:0:0:0:0:0:0:1'),('codecheng','codecheng','用户登录','2021-06-15 17:55:46','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-15 17:57:18','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 17:57:32','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 18:04:00','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 20:58:29','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-15 21:32:40','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 09:27:05','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-16 09:29:26','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-16 09:43:24','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 13:24:08','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 16:46:47','0:0:0:0:0:0:0:1'),('周岭','周岭','用户登录','2021-06-16 19:16:23','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-16 20:03:56','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-16 20:14:23','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-16 20:16:16','0:0:0:0:0:0:0:1'),('杨小倩','杨小倩','用户登录','2021-06-16 20:17:34','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 20:19:08','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 20:56:30','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 21:06:59','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 21:07:46','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 21:09:06','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 21:28:13','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 21:31:26','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 22:04:31','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 22:24:47','0:0:0:0:0:0:0:1'),('djc','djc','用户登录','2021-06-16 22:31:18','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-17 09:37:33','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-17 09:39:16','0:0:0:0:0:0:0:1'),('周岭','周岭','用户登录','2021-06-17 09:39:48','0:0:0:0:0:0:0:1'),('杨小倩','杨小倩','用户登录','2021-06-17 09:41:04','10.60.27.211'),('曾伟丽','曾伟丽','用户登录','2021-06-17 20:55:58','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-17 21:48:51','0:0:0:0:0:0:0:1'),('codecheng','codecheng','用户登录','2021-06-17 22:31:32','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-18 09:36:54','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-18 09:45:56','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-18 10:19:51','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-18 11:51:52','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户更新','2021-06-18 11:52:12','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户更新','2021-06-18 11:52:16','0:0:0:0:0:0:0:1'),('曾伟丽','曾伟丽','用户登录','2021-06-18 14:08:51','0:0:0:0:0:0:0:1'),('admin','admin','用户登录','2021-06-18 14:35:49','0:0:0:0:0:0:0:1'),('codecheng','codecheng','用户登录','2021-06-18 14:53:34','0:0:0:0:0:0:0:1');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
